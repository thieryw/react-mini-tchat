{"version":3,"sources":["components/Message/Message.tsx","components/Messages/Messages.tsx","components/User/User.tsx","components/Form/Form.tsx","components/App/App.tsx","logic.ts","index.tsx"],"names":["Message","props","message","className","direction","description","Messages","messages","evtMessageSent","useReducer","x","forceUpdate","useEvt","ctx","attach","map","index","key","User","user","store","name","Form","receiver","emitter","useState","textInput","setTextInput","asyncSendMessage","useAsyncCallback","sendMessage","handleSubmit","useCallback","e","preventDefault","execute","onSubmit","type","value","onChange","target","App","users","setEmitter","onClick","getStore","a","simulateNetworkDelay","delay","Promise","resolve","setTimeout","Evt","create","params","push","post","Switcher","asyncGetStore","useAsync","undefined","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c923a34a.chunk.js","sourcesContent":["import React from \"react\";\nimport {Store} from \"../../logic\";\n\n\nexport const Message: React.FunctionComponent<{\n\n    message: Store[\"users\"][number][\"messages\"][number];\n\n}> = (props)=>{\n\n    const {message} = props;\n\n    return(\n        <div className={message.direction}>\n            <em>\n                {message.direction === \"incoming\" ? \"received\" : \"sent\"}\n            </em>\n\n            <p>{message.description}</p>\n        </div>\n\n    )\n\n}","import React, {useReducer} from \"react\";\nimport {Store} from \"../../logic\";\nimport { Message } from \"../Message/Message\";\nimport {useEvt} from \"evt/hooks\";\n\n\n\nexport const Messages:React.FunctionComponent<{\n    messages: Store[\"users\"][number][\"messages\"];\n    evtMessageSent: Store[\"evtMessageSent\"];\n\n}> = (props)=>{\n\n    const {messages, evtMessageSent} = props;\n    const [, forceUpdate] = useReducer(x=>x+1, 0);\n\n    useEvt(ctx=>{\n        evtMessageSent.attach(ctx, ()=> forceUpdate());\n\n    },[messages, evtMessageSent])\n\n    return(\n        <div className=\"message-wrapper\">\n            {\n                messages.map((message, index) => \n                    <Message key={index} message={message}/>\n                )\n            }\n        </div>\n\n    )\n}","import React from \"react\";\nimport {Store} from \"../../logic\";\nimport {Messages} from \"../Messages/Messages\"\n\n\n\nexport const User: React.FunctionComponent<{\n    user: Store[\"users\"][number];\n    store: Pick<Store,\n        \"sendMessage\" |\n        \"evtMessageSent\"\n    >;\n}> = (props)=>{\n\n    const {user, store} = props;\n\n\n    \n\n    return(\n        <div className=\"user\">\n            <h2>User {user.name}</h2>\n            \n            <Messages \n                evtMessageSent={store.evtMessageSent} \n                messages={user.messages} \n            />\n\n        </div>\n    )\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {useAsyncCallback} from \"react-async-hook\";\n\n\n\nexport const Form: React.FunctionComponent<{\n    store: Pick<Store,\n       \"sendMessage\" \n    >;\n    emitter: Store[\"users\"][number];\n    receiver: Store[\"users\"][number];\n\n}> = (props)=>{\n\n    const {store, receiver, emitter} = props;\n    const [textInput, setTextInput] = useState(\"\");\n\n    const asyncSendMessage = useAsyncCallback(store.sendMessage)\n\n    const handleSubmit = useCallback((e: React.FormEvent<HTMLFormElement>)=>{\n\n        e.preventDefault();\n\n        if(textInput === \"\") return;\n\n        asyncSendMessage.execute(\n            {\n                emitter, \n                receiver, \n                \"description\": textInput\n            }\n        );\n\n        setTextInput(\"\");\n\n\n    },[textInput, asyncSendMessage, emitter, receiver]);\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={textInput}\n                onChange={useCallback(({target}) => setTextInput(target.value),[])}\n            />\n\n            <input type=\"submit\" value=\"send message\"/>\n        </form>\n\n    )\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {User} from \"../User/User\";\nimport {Form} from \"../Form/Form\";\n\n\n\n\n\nexport const App:React.FunctionComponent<{\n    store: Store;\n}> = (props)=>{\n\n    const {store} = props;\n    const [emitter, setEmitter] = useState(store.users[0]);\n\n\n    return(\n        <div>\n            <h1>Tchat App</h1>\n\n            <input \n                type=\"button\" \n                value=\"toggle user\" \n                onClick={useCallback(()=>setEmitter(\n                    emitter === store.users[0] ? store.users[1] : store.users[0]\n                ),[store, emitter])}\n            />\n\n            <div className=\"users\">\n                <User store={store} user={store.users[0]}/>\n                <User store={store} user={store.users[1]}/>\n            </div>\n\n            <Form \n                emitter={emitter} \n                receiver={emitter === store.users[0] ? store.users[1] : store.users[0]}\n                store={store}\n                \n            />\n\n\n        </div>\n    )\n}","import {Evt, NonPostableEvt, ToPostableEvt} from \"evt\";\n\n\n\n\n\ntype Message = {\n    description: string;\n    direction: \"incoming\" | \"outgoing\";\n}\n\ntype User = {\n    name: String;\n    messages: Message[];\n}\nexport type Store = {\n    users: User[];\n    sendMessage: (params: {emitter: User; receiver: User; description: string}) => Promise<void>;\n\n    evtMessageSent: NonPostableEvt<void>;\n\n}\n\nexport async function getStore(): Promise<Store>{\n\n    const simulateNetworkDelay = (delay: number)=>{\n        return new Promise<void>(resolve => setTimeout(resolve, delay));\n    }\n\n    const users: User[] = [\n        {\n            \"messages\": [],\n            \"name\": \"User 1\"\n        },\n        {\n            \"name\": \"User 2\",\n            \"messages\": [],\n        }\n    ]\n\n    const store: ToPostableEvt<Store> = {\n        \"evtMessageSent\": Evt.create(),\n\n        \"sendMessage\": async params => {\n            await simulateNetworkDelay(300);\n\n            const {emitter, receiver, description} = params;\n\n            emitter.messages.push({description, \"direction\": \"outgoing\"});\n            receiver.messages.push({description, \"direction\": \"incoming\"})\n\n            store.evtMessageSent.post();\n\n        },\n\n        users\n    }\n\n    await simulateNetworkDelay(1500);\n\n    return store;\n\n\n\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n//import * as serviceWorker from './serviceWorker';\nimport {App} from \"./components/App/App\";\nimport {useAsync} from \"react-async-hook\";\nimport {getStore} from \"./logic\";\n\nconst Switcher: React.FunctionComponent = ()=>{\n  \n  const asyncGetStore = useAsync(getStore, []);\n  \n  \n  return(\n    asyncGetStore.result === undefined ? \n      <h1>Loading...</h1> : \n      <App store={asyncGetStore.result} \n    />\n\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Switcher />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}