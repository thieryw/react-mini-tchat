{"version":3,"sources":["components/Message/Message.tsx","components/Messages/Messages.tsx","components/Form/Form.tsx","components/User/User.tsx","components/App/App.tsx","logic.ts","index.tsx"],"names":["Message","props","message","className","direction","description","Messages","user","messages","map","index","key","reverse","Form","store","receiver","emitter","useState","textInput","setTextInput","asyncSendMessage","useAsyncCallback","sendMessage","handleSubmit","useCallback","e","preventDefault","execute","onSubmit","type","value","onChange","target","User","useReducer","x","forceUpdate","contacts","useMemo","out","users","forEach","contact","push","useEvt","ctx","evtMessageSent","attach","data","id","name","App","currentUserIndex","setCurrentUserIndex","toggleUser","length","onClick","getStore","a","simulateNetworkDelay","delay","Promise","resolve","setTimeout","Evt","params","post","Switcher","asyncGetStore","useAsync","undefined","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a7ba3ff.chunk.js","sourcesContent":["import React from \"react\";\nimport {Store} from \"../../logic\";\n\n\nexport const Message: React.FunctionComponent<{\n\n    message: Store[\"users\"][number][\"messages\"][number];\n\n}> = (props)=>{\n\n    const {message} = props;\n\n    return(\n        <div className={message.direction}>\n            <em>\n                {message.direction === \"incoming\" ? \"received\" : \"sent\"}\n            </em>\n\n            <p>{message.description}</p>\n        </div>\n\n    )\n\n}","import React from \"react\";\nimport {Store} from \"../../logic\";\nimport { Message } from \"../Message/Message\";\n\n\n\nexport const Messages:React.FunctionComponent<{\n    user: Store[\"users\"][number];\n\n}> = (props)=>{\n\n    const {user} = props;\n\n\n\n    return(\n        <div className=\"message-wrapper\">\n            {\n                user.messages.map((message, index) => \n                    <Message key={index} message={message}/>\n                ).reverse()\n            }\n        </div>\n\n    )\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {useAsyncCallback} from \"react-async-hook\";\n\n\n\nexport const Form: React.FunctionComponent<{\n    store: Pick<Store,\n       \"sendMessage\" \n    >;\n    emitter: Store[\"users\"][number];\n    receiver: Store[\"users\"][number];\n\n}> = (props)=>{\n\n    const {store, receiver, emitter} = props;\n    const [textInput, setTextInput] = useState(\"\");\n\n    const asyncSendMessage = useAsyncCallback(store.sendMessage)\n\n    const handleSubmit = useCallback((e: React.FormEvent<HTMLFormElement>)=>{\n\n        e.preventDefault();\n\n        if(textInput === \"\") return;\n\n        asyncSendMessage.execute(\n            {\n                emitter, \n                receiver, \n                \"description\": textInput\n            }\n        );\n\n        setTextInput(\"\");\n\n\n    },[textInput, asyncSendMessage, emitter, receiver]);\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={textInput}\n                onChange={useCallback(({target}) => setTextInput(target.value),[])}\n            />\n\n            <input type=\"submit\" value=\"send message\"/>\n        </form>\n\n    )\n}","import React, {useMemo, useReducer} from \"react\";\nimport {Store} from \"../../logic\";\nimport {Messages} from \"../Messages/Messages\";\nimport {Form} from \"../Form/Form\";\nimport {useEvt} from \"evt/hooks\";\n\n\n\nexport const User: React.FunctionComponent<{\n    user: Store[\"users\"][number];\n    store: Store;\n}> = (props)=>{\n\n    const {user, store} = props;\n    const [, forceUpdate] = useReducer(x=>x+1, 0);\n\n    const contacts = useMemo(()=>{\n        const out: Store[\"users\"] = [];\n\n        store.users.forEach(contact =>{\n            if(contact === user) return;\n\n            out.push(contact);\n\n\n        });\n\n        return out;\n\n    },[store, user]);\n\n    useEvt(ctx =>{\n        \n        store.evtMessageSent.attach(\n            data => \n                data.emitter.id === user.id || \n                data.emitter.id === contacts[0].id\n            ,\n            ctx,\n            ()=>forceUpdate()\n        );\n\n    },[store]);\n\n\n    \n\n    return(\n        <div className=\"user\">\n            <h2>{user.name}</h2>\n            \n            <Messages \n                user={user} \n            />\n\n            <Form\n                emitter={user}\n                receiver={contacts[0]}\n                store={store}\n            />\n\n        </div>\n    )\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {User} from \"../User/User\";\nimport \"./App.scss\";\n\n\n\n\n\nexport const App:React.FunctionComponent<{\n    store: Store;\n}> = (props)=>{\n\n    const {store} = props;\n    const [currentUserIndex, setCurrentUserIndex] = useState(0);\n\n    const toggleUser = useCallback(()=>{\n        if(currentUserIndex === store.users.length - 1){\n            setCurrentUserIndex(0);\n            return;\n        }\n\n        setCurrentUserIndex(currentUserIndex + 1);\n\n    }, [currentUserIndex, store.users.length]);\n\n\n    return(\n        <div className=\"App\">\n            <h1>Tchat App</h1>\n            <input type=\"button\" value=\"Toggle User\" onClick={toggleUser}/>\n\n\n\n            {\n                store.users.map((user, index) => \n                        <div \n                            key={index} \n                            className={index === currentUserIndex ? \"current\" : \"\"}\n                        >\n                            <User \n                                store={store}\n                                user={user}\n\n                            />\n                        </div>\n\n                    )\n\n            }\n\n\n\n\n        </div>\n    )\n}","import {Evt, NonPostableEvt, ToPostableEvt} from \"evt\";\n\n\n\n\n\ntype Message = {\n    description: string;\n    direction: \"incoming\" | \"outgoing\";\n\n}\n\ntype User = {\n    name: String;\n    messages: Message[];\n    id: number;\n}\nexport type Store = {\n    users: User[];\n    sendMessage: (params: {emitter: User; receiver: User; description: string}) => Promise<void>;\n\n    evtMessageSent: NonPostableEvt<Parameters<Store[\"sendMessage\"]>[0]>;\n\n}\n\nexport async function getStore(): Promise<Store>{\n\n    const simulateNetworkDelay = (delay: number)=>{\n        return new Promise<void>(resolve => setTimeout(resolve, delay));\n    };\n\n\n    const users: User[] = [\n        {\n            \"messages\": [],\n            \"name\": \"User 1\",\n            \"id\": 0\n        },\n        {\n            \"name\": \"User 2\",\n            \"messages\": [],\n            \"id\": 1\n        }\n    ];\n\n    const store: ToPostableEvt<Store> = {\n        \"evtMessageSent\": new Evt(),\n\n        \"sendMessage\": async params => {\n            await simulateNetworkDelay(300);\n\n            const {emitter, receiver, description} = params;\n\n            emitter.messages.push({description, \"direction\": \"outgoing\"});\n            receiver.messages.push({description, \"direction\": \"incoming\"})\n\n            store.evtMessageSent.post(params);\n\n        },\n\n        users\n    }\n\n    await simulateNetworkDelay(1500);\n\n    return store;\n\n\n\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n//import * as serviceWorker from './serviceWorker';\nimport {App} from \"./components/App/App\";\nimport {useAsync} from \"react-async-hook\";\nimport {getStore} from \"./logic\";\n\nconst Switcher: React.FunctionComponent = ()=>{\n  \n  const asyncGetStore = useAsync(getStore, []);\n  \n  \n  return(\n    asyncGetStore.result === undefined ? \n      <h1>Loading...</h1> : \n      <App store={asyncGetStore.result} \n    />\n\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Switcher />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}