{"version":3,"sources":["components/User/Contacts.tsx","components/User/Conversation.tsx","components/User/User.tsx","components/App/App.tsx","logic.ts","index.tsx"],"names":["Contacts","props","user","store","isComponentVisible","useReducer","x","forceUpdate","asyncNewConversation","useAsyncCallback","newConversation","asyncEmptyInterlocutor","emptyInterlocutors","asyncSelectInterlocutor","selectInterlocutor","asyncUnselectInterlocutor","unselectInterlocutor","useEvt","ctx","Evt","merge","evtInterlocutorSelected","evtInterlocutorUnselected","attach","data","same","backToConversation","useCallback","execute","className","style","height","loading","type","value","color","disabled","onClick","interlocutors","map","interlocutor","name","contacts","length","contact","index","key","Contact","useState","isSelected","setIsSelected","handleClick","evtConversationStarted","evtInterlocutorsEmptied","_user","Conversation","textInput","setTextInput","messagesRef","useRef","asyncSendMessage","sendMessage","asyncUnselectConversation","unselectConversation","handleSubmit","evtMessageSent","emitter","currentConversation","participants","evtConversationSelected","useEffect","current","scrollTo","scrollHeight","participant","ref","messages","message","onChange","target","Message","messageRef","adjustWidth","a","Promise","resolve","setTimeout","width","description","User","isUserVisible","isContactVisible","setIsContactVisible","isConversationVisible","setIsConversationVisible","evtConversationUnselected","selectConversation","conversation","conversationsStyle","display","conversations","App","userIndex","setUserIndex","window","changeUser","users","getStore","simulateNetworkDelay","ms","out","i","push","undefined","forEach","_index","params","post","splice","indexOf","Error","console","log","conversationId","Switcher","asyncGetStore","useAsync","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.058bec1b.chunk.js","sourcesContent":["import React, {useCallback, useState, useReducer} from \"react\";\nimport {Store} from \"../../logic\";\nimport {useAsyncCallback, UseAsyncReturn} from \"react-async-hook\";\nimport {useEvt} from \"evt/hooks\";\nimport {same} from \"evt/tools/inDepth\";\nimport {Evt} from \"evt\";\nimport \"./Contacts.scss\";\n\n\n\n\nexport const Contacts: React.FunctionComponent<{\n    user: Store[\"users\"][number];\n    store: Pick<Store,\n        \"evtInterlocutorSelected\" |\n        \"newConversation\" |\n        \"selectInterlocutor\" |\n        \"unselectInterlocutor\" |\n        \"evtInterlocutorUnselected\" |\n        \"emptyInterlocutors\" |\n        \"evtInterlocutorsEmptied\" |\n        \"evtConversationStarted\"\n\n    >;\n\n    isComponentVisible: boolean;\n\n}> = (props)=>{\n\n\n    const {user, store, isComponentVisible} = props;\n    const [, forceUpdate] = useReducer(x=>x+1, 0);\n    \n\n\n    const asyncNewConversation = useAsyncCallback(store.newConversation);\n    const asyncEmptyInterlocutor = useAsyncCallback(store.emptyInterlocutors);\n    const asyncSelectInterlocutor = useAsyncCallback(store.selectInterlocutor);\n    const asyncUnselectInterlocutor = useAsyncCallback(store.unselectInterlocutor);\n    useEvt(ctx =>{\n\n        Evt.merge(ctx, [store.evtInterlocutorSelected, store.evtInterlocutorUnselected]).attach(\n            data => same(user, data.user),\n            ()=> forceUpdate()\n        );\n\n        \n        \n\n    }, [store, user]);\n\n\n\n\n    const backToConversation = useCallback(()=>{\n        \n        asyncEmptyInterlocutor.execute(user);\n\n    },[asyncEmptyInterlocutor, user])\n\n    \n\n\n\n    return(\n        <div \n            className=\"contacts\"\n            style={\n                {\n                    height: isComponentVisible && \n                    !asyncEmptyInterlocutor.loading &&\n                    !asyncNewConversation.loading ?\n                    \"100%\" : \"0%\",\n                }\n            }\n        >\n            <header>\n                <input \n                    type=\"button\" \n                    value=\"<\"\n                    style={\n                        {color: asyncEmptyInterlocutor.loading\n                            || \n                        asyncNewConversation.loading ? \"grey\" : \"greenyellow\"}\n                    }\n                    disabled={asyncEmptyInterlocutor.loading}\n                    onClick={backToConversation}\n                />\n                <div>\n                    <h2>Contacts</h2>\n                    {\n                        asyncSelectInterlocutor.loading ||\n                        asyncUnselectInterlocutor.loading ?\n                        <em className=\"loading\">Loading...</em> : \n                        <em>{user.interlocutors.map(interlocutor => `${interlocutor.name}, `)}</em>\n                    }\n                    \n\n                </div>\n\n\n            </header>\n            <em>{user.contacts.length} contacts</em>\n\n            <section>\n                {\n                    user.contacts.map(\n                        (contact, index)=> \n                                <Contact \n                                    store={store} \n                                    contact={contact} \n                                    user={user}\n                                    asyncSelectInterlocutor={asyncSelectInterlocutor}\n                                    asyncUnselectInterlocutor={asyncUnselectInterlocutor}\n                                    key={index}\n                                />\n\n                    )\n                    \n                }\n            </section>\n\n\n\n            <input \n                disabled={user.interlocutors.length === 0} \n                className={user.interlocutors.length === 0 ? \"disabled\" : \"\"}\n                type=\"button\" \n                value=\">\"\n                onClick={\n                    useCallback(()=>\n                        asyncNewConversation.execute(user)\n                    , [user, asyncNewConversation])\n\n                }\n            />\n\n\n\n\n\n        </div>\n    )\n}\n\nconst Contact: React.FunctionComponent<{\n    contact: Store[\"users\"][number][\"contacts\"][number];\n    user: Store[\"users\"][number];\n    store: Pick<Store,\n        \"selectInterlocutor\" |\n        \"evtInterlocutorSelected\"|\n        \"unselectInterlocutor\" |\n        \"evtInterlocutorUnselected\" |\n        \"evtInterlocutorsEmptied\" |\n        \"evtConversationStarted\"\n\n    >\n\n    asyncSelectInterlocutor: UseAsyncReturn<void, [{\n        user: Store[\"users\"][number];\n        contact: Store[\"users\"][number];\n    }]>\n\n    asyncUnselectInterlocutor: UseAsyncReturn<void, [{\n        user: Store[\"users\"][number];\n        contact: Store[\"users\"][number];\n    }]>\n\n}> = (props)=>{\n\n    const {\n        contact, \n        user, \n        store, \n        asyncSelectInterlocutor, \n        asyncUnselectInterlocutor\n    } = props;\n\n    const [isSelected, setIsSelected] = useState(false);\n\n    const handleClick = useCallback(()=>{\n        if(isSelected){\n            asyncUnselectInterlocutor.execute({user, contact});\n            return;\n        }\n\n        asyncSelectInterlocutor.execute({user, contact});\n\n    }, [isSelected, contact, user, asyncUnselectInterlocutor, asyncSelectInterlocutor]);\n\n    useEvt(ctx=>{\n\n        Evt.merge(ctx, [store.evtInterlocutorSelected, store.evtInterlocutorUnselected]).attach(\n            data => same(user, data.user) && same(contact, data.contact),\n            ()=> setIsSelected(!isSelected)\n        );\n\n\n        Evt.merge(ctx, [store.evtConversationStarted, store.evtInterlocutorsEmptied]).attach(\n            _user => same(user, _user) && isSelected,\n            () => setIsSelected(false)\n        );\n\n\n\n\n    },[contact, user, store, isSelected])\n\n    return(\n        <div className={`contact ${isSelected ? \"contact-selected\" : \"\"}`} onClick={handleClick}>\n\n            <p>{contact.name}</p>\n\n\n        </div>\n\n    )\n\n}","import React, {useState, useCallback, useReducer, useRef, useEffect} from \"react\";\nimport {Store} from \"../../logic\";\nimport {useAsyncCallback} from \"react-async-hook\";\nimport {useEvt} from \"evt/hooks\";\nimport {same} from \"evt/tools/inDepth\";\nimport \"./Conversation.scss\";\n\n\nexport const Conversation: React.FunctionComponent<{\n    store: Pick<Store,\n        \"sendMessage\" |\n        \"evtMessageSent\" |\n        \"evtConversationSelected\" |\n        \"unselectConversation\" |\n        \"evtConversationUnselected\"\n    >;\n    user: Store[\"users\"][number];\n    isComponentVisible: boolean;\n    \n}> = (props)=>{\n    const {user, isComponentVisible, store} = props;\n    const [textInput, setTextInput] = useState(\"\");\n    const [, forceUpdate] = useReducer(x=>x+1, 0);\n    const messagesRef = useRef<HTMLDivElement>(null);\n\n    const asyncSendMessage = useAsyncCallback(store.sendMessage);\n    const asyncUnselectConversation = useAsyncCallback(store.unselectConversation);\n\n\n\n\n    const handleSubmit = useCallback(()=>{\n\n        asyncSendMessage.execute({\n            \"description\": textInput,\n            \"emitter\": user\n        });\n\n\n        \n\n        setTextInput(\"\");\n\n\n\n    },[textInput, asyncSendMessage, user]);\n\n    useEvt(ctx =>{\n        store.evtMessageSent.attach(\n            data => same(\n                data.emitter.currentConversation?.participants,\n                user.currentConversation?.participants\n            ),\n            ctx,\n            ()=> forceUpdate()\n        );\n\n\n        store.evtConversationSelected.attach(\n            data => same(data.user, user),\n            ctx,\n            ()=> forceUpdate()\n        );\n        \n\n    },[store, user]);\n\n    useEffect(()=>{\n        \n        if(!messagesRef || !messagesRef.current){\n            return;\n        }\n\n        messagesRef.current.scrollTo(0, messagesRef.current.scrollHeight);\n\n\n\n    });\n\n    \n\n\n\n    return(\n\n        <div \n            className=\"Conversation\"\n            style={\n                {\n                    height: isComponentVisible \n                    && !asyncUnselectConversation.loading ? \"100%\" : \"0%\"\n                }\n            }\n        >\n            <header>\n                <h3>\n                    {\n                        user.currentConversation?.participants.map(\n                            participant => `${participant.name}, `\n                        )\n                    }\n                </h3>\n                <input \n                    type=\"button\"\n                    value=\"<\"\n                    onClick={\n                        useCallback(()=>{\n\n                            asyncUnselectConversation.execute(user);\n\n                        }, [user, asyncUnselectConversation])\n                    }\n                />\n            </header>\n\n\n            <div ref={messagesRef} className=\"messages\">\n                {\n                    user.currentConversation?.messages.map(\n                        (message, index) => \n                            <Message \n                                key={index} \n                                message={message}\n                                user={user}\n                            />\n                    )\n                }\n            </div>\n\n            <form>\n                <textarea \n                    onChange={useCallback(({target}) => setTextInput(target.value), [])} \n                    value={textInput}\n                />\n\n                <input \n                    type=\"submit\" \n                    value={asyncSendMessage.loading ? \"...\" : \">\"}\n                    disabled={asyncSendMessage.loading}\n                    onClick={handleSubmit}\n                />\n\n            </form>\n                \n\n\n\n\n        </div>\n\n    )\n}\n\nconst Message: React.FunctionComponent<{\n    message: Store[\"users\"][number][\"conversations\"][number][\"messages\"][number];\n    user: Store[\"users\"][number];\n\n}> = (props)=>{\n\n    const {message, user} = props\n\n    const messageRef = useRef<HTMLDivElement>(null);\n\n\n\n    const adjustWidth = useCallback(async ()=>{\n\n        await new Promise<void>(resolve => setTimeout(resolve, 1));\n\n        if(!messageRef || !messageRef.current){\n                return;\n        }\n\n        messageRef.current.style.width = `${\n            message.emitter === user ?\n            \"86%\" : \"96%\"\n        }`;\n\n    },[user, message.emitter]);\n\n    useEffect(()=>{\n\n        adjustWidth();\n\n\n    },[adjustWidth]);\n\n\n\n\n\n\n\n    return(\n        <div \n            ref={messageRef}\n            className={message.emitter === user ? \"outgoing\" : \"incoming\"}\n            style={\n                {\n                    width: \"30%\"\n\n                }\n            }\n        >\n            <em>{message.emitter.name}</em>\n            <p>{\n                message.description\n            }</p>\n        </div>\n    )\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {useEvt} from \"evt/hooks\";\nimport {same} from \"evt/tools/inDepth\";\nimport {Contacts} from \"./Contacts\";\nimport {Conversation} from \"./Conversation\";\nimport {Evt} from \"evt\";\nimport \"./User.scss\";\n\n\n\n\nexport const User: React.FunctionComponent<{\n    user: Store[\"users\"][number];\n    isUserVisible: boolean;\n    store: Omit<Store,\n        \"users\"\n    >;\n}> = (props)=>{\n\n    const {user, store, isUserVisible} = props;\n    const [isContactVisible, setIsContactVisible] = useState(false);\n    const [isConversationVisible, setIsConversationVisible] = useState(false);\n\n    useEvt(ctx=>{\n        \n\n        Evt.merge(ctx, [store.evtConversationStarted, store.evtInterlocutorsEmptied]).attach(\n            _user => same(_user, user),\n            () => setIsContactVisible(false)\n        );\n\n        \n\n        store.evtConversationUnselected.attach(\n            _user => same(user, _user),\n            ctx,\n            () => setIsConversationVisible(false)\n        );\n\n        store.evtConversationSelected.attach(\n            data => same(data.user, user),\n            ctx,\n            () => setIsConversationVisible(true)\n        );\n\n\n\n    },[store, user]);\n\n\n    const selectConversation = useCallback((conversation: Store[\"users\"][number][\"conversations\"][number])=>{\n\n\n\n        store.selectConversation({\n            conversation,\n            user\n        });\n\n\n\n\n    },[store, user])\n\n    const conversationsStyle = {\n        display: isContactVisible || isConversationVisible ? \"none\" : \"flex\"\n\n    }\n\n\n\n    return(\n        <div className={isUserVisible ? \"User\" : \"hidden\"}>\n            <div className=\"conversation-wrapper\" style={conversationsStyle}>\n                <header>\n                    <div>\n                        <h2>{user.name}</h2>\n                    </div>\n\n\n                    <input type=\"button\" value=\"+\" onClick={useCallback(()=> setIsContactVisible(true), [])}/>\n\n                </header>\n\n                <div className=\"conversations\">\n\n                    {\n                        user.conversations.length === 0 ? \"\" : \n                        user.conversations.map((conversation, index) => \n                            <div \n                                className=\"conversation-li\"\n                                key={index}\n                                onClick={()=> selectConversation(conversation)}\n                            >\n                            {\n                                <p>\n                                    {\n                                        conversation.participants.map(participant => `${participant.name}, `)\n                                    }\n                                </p>\n                            }\n                            </div>\n                        )\n                    }\n\n\n                </div>\n            </div>\n\n            <Contacts store={store} user={user} isComponentVisible={isContactVisible}/>\n\n\n            <Conversation \n                isComponentVisible={isConversationVisible}\n                store={store}\n                user={user}\n            />\n\n\n\n\n\n\n\n        </div>\n    )\n}","import React, {useState} from \"react\";\nimport {Store} from \"../../logic\";\nimport {User} from \"../User/User\";\nimport \"./App.scss\";\n\n\n\nexport const App: React.FunctionComponent<{store: Store}> = (props)=>{\n\n    const {store} = props;\n    const [userIndex, setUserIndex] = useState(0);\n\n\n\n    (window as any).changeUser = function(index: number){\n        if(index >= store.users.length || index < 0){\n            return;\n        }\n\n        setUserIndex(index);\n    }\n  \n\n    \n\n\n    return(\n        <div className=\"App\">\n\n            {\n                store.users.map(\n                    (user, index) => <User user={user} isUserVisible={userIndex === index} store={store} key={index}/>\n                )\n            }\n\n\n        </div>\n    )\n}","import {Evt, NonPostableEvt, ToPostableEvt} from \"evt\";\n\n\ntype Message = {\n    description: string;\n    emitter: User;\n    receivers: User[];\n}\n\ntype Conversation = {\n    participants: User[];\n    messages: Message[];\n    id: number;\n}\ntype User = {\n    name: string;\n    contacts: User[];\n    interlocutors: User[];\n    conversations: Conversation[];\n    currentConversation: Conversation | undefined;\n    id: number;\n\n}\n\nexport type Store = {\n    users: User[];\n    selectInterlocutor: (params: {user: User; contact: User}) => Promise<void>;\n    unselectInterlocutor: (params: {user: User; contact: User}) => Promise<void>;\n    emptyInterlocutors: (user: User) => Promise<void>;\n    selectConversation: (params: {user: User; conversation: Conversation})=> Promise<void>;\n    unselectConversation: (user: User)=> Promise<void>;\n    sendMessage: (params: {emitter: User; description: string}) => Promise<void>;\n    newConversation: (user: User)=> Promise<void>;\n\n    evtInterlocutorSelected: NonPostableEvt<Parameters<Store[\"selectInterlocutor\"]>[0]>;\n    evtInterlocutorUnselected: NonPostableEvt<Parameters<Store[\"unselectInterlocutor\"]>[0]>;\n    evtInterlocutorsEmptied: NonPostableEvt<User>;\n    evtMessageSent: NonPostableEvt<Parameters<Store[\"sendMessage\"]>[0]>;\n    evtConversationSelected: NonPostableEvt<Parameters<Store[\"selectConversation\"]>[0]>;\n    evtConversationUnselected: NonPostableEvt<User>;\n    evtConversationStarted: NonPostableEvt<Parameters<Store[\"newConversation\"]>[0]>;\n}\n\n\nexport async function getStore(): Promise<Store>{\n\n    const simulateNetworkDelay = (ms: number)=>{\n        return new Promise<void>(resolve => setTimeout(resolve, ms));\n    }\n\n    const users: User[] = (()=>{\n        const out: User[] = [];\n        for(let i = 0; i < 30; i++){\n            out.push({\n                \"contacts\": [],\n                \"name\": `User ${i+1}`,\n                \"interlocutors\": [],\n                \"conversations\": [],\n                \"currentConversation\": undefined,\n                \"id\": i\n            })\n        }\n\n        out.forEach((user, index)=>{\n            out.forEach((_user, _index)=>{\n                if(index === _index){\n                    return;\n                }\n\n                user.contacts.push(_user);\n            });\n        });\n\n\n        return out;\n\n    })();\n\n    let conversationId: 0;\n\n\n    const store: ToPostableEvt<Store> = {\n       users,\n       \"evtInterlocutorSelected\": new Evt(),\n       \"evtInterlocutorUnselected\": new Evt(),\n       \"evtInterlocutorsEmptied\": new Evt(),\n       \"evtMessageSent\": new Evt(),\n       \"evtConversationStarted\": new Evt(),\n       \"evtConversationSelected\": new Evt(),\n       \"evtConversationUnselected\": new Evt(),\n\n       \"selectInterlocutor\": async params =>{\n           const {contact, user} = params;\n\n           await simulateNetworkDelay(300);\n\n           user.interlocutors.push(contact);\n\n           store.evtInterlocutorSelected.post(params);\n\n       },\n\n       \"unselectInterlocutor\": async params =>{\n           const {contact, user} = params;\n\n           await simulateNetworkDelay(300);\n\n\n           user.interlocutors.splice(\n               user.interlocutors.indexOf(contact),\n               1\n           );\n\n           store.evtInterlocutorUnselected.post(params);\n\n       },\n\n       \"emptyInterlocutors\": async user =>{\n           await simulateNetworkDelay(300);\n\n           user.interlocutors = [];\n\n           store.evtInterlocutorsEmptied.post(user);\n       },\n\n       \"selectConversation\": async params =>{\n           const {conversation, user} = params;\n\n           await simulateNetworkDelay(300);\n\n           user.currentConversation = conversation;\n\n           store.evtConversationSelected.post(params);\n\n       },\n\n       \"unselectConversation\": async user =>{\n\n           await simulateNetworkDelay(300);\n\n           user.currentConversation = undefined;\n\n           store.evtConversationUnselected.post(user);\n\n       },\n\n       \"newConversation\": async user =>{\n           await simulateNetworkDelay(300);\n\n           try{\n               if(user.interlocutors.length === 0){\n                   throw new Error(\"Error! No interlocutors selected\");\n               }\n\n           }catch(err){\n                console.log(err);\n                return;\n           }\n\n           const newConversation: Conversation = {\n               \"id\": conversationId++,\n               \"messages\": [],\n               \"participants\": (()=>{\n                   const out: User[] = [];\n\n                   out.push(user);\n\n                   user.interlocutors.forEach(user =>{\n                       out.push(user);\n                   });\n\n                   return out;\n               })()\n\n           }\n\n           user.conversations.push(newConversation);\n\n           user.interlocutors.forEach(interlocutor => interlocutor.conversations.push(newConversation));\n\n           user.interlocutors = [];\n\n           store.evtConversationStarted.post(user);\n       },\n\n       \"sendMessage\": async params =>{\n           const {emitter, description} = params;\n\n           await simulateNetworkDelay(300);\n\n           emitter.currentConversation?.messages.push({\n               description,\n               emitter,\n               \"receivers\": (()=>{\n\n                   const out: User[] = [];\n\n                   emitter.currentConversation.participants.forEach(participant =>{\n                       if(participant === emitter){\n                           return;\n                       }\n\n                       out.push(participant);\n                   })\n\n                   return out;\n               })()\n           });\n\n\n           store.evtMessageSent.post(params);\n\n\n       }\n\n    }\n\n\n    await simulateNetworkDelay(1500);\n\n\n    return store;\n\n\n\n}\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n//import * as serviceWorker from './serviceWorker';\nimport {App} from \"./components/App/App\";\nimport {useAsync} from \"react-async-hook\";\nimport {getStore} from \"./logic\";\n\nconst Switcher: React.FunctionComponent = ()=>{\n  \n  const asyncGetStore = useAsync(getStore, []);\n  \n  \n  return(\n    asyncGetStore.result === undefined ? \n      <h1>Loading...</h1> : \n      <App store={asyncGetStore.result} \n    />\n\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Switcher />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}