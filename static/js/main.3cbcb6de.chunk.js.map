{"version":3,"sources":["components/Messages/Message.tsx","components/Spinner.tsx","components/Messages/Messages.tsx","components/Form/Form.tsx","components/Contacts/Contacts.tsx","components/User/User.tsx","components/App/App.tsx","logic.ts","index.tsx"],"names":["Message","props","message","className","direction","emitter","name","receiver","description","Spinner","Messages","user","store","isMessageLoading","useReducer","x","forceUpdate","useEvt","ctx","evtMessageSent","attach","data","id","interlocutor","messages","map","index","key","reverse","Form","asyncSendMessage","useState","textInput","setTextInput","handleSubmit","useCallback","e","preventDefault","execute","onSubmit","value","onChange","target","disabled","undefined","type","Contacts","contacts","asyncChangeInterlocutor","contact","onClick","User","isCurrentUser","useMemo","out","users","forEach","push","evtInterlocutorChanged","same","useAsyncCallback","changeInterlocutor","sendMessage","loading","App","currentUserIndex","setCurrentUserIndex","toggleUser","length","getStore","a","simulateNetworkDelay","delay","Promise","resolve","setTimeout","i","Evt","params","post","newInterlocutor","Switcher","asyncGetStore","useAsync","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cbcb6de.chunk.js","sourcesContent":["import React from \"react\";\nimport {Store} from \"../../logic\";\n\n\nexport const Message: React.FunctionComponent<{\n\n    message: Store[\"users\"][number][\"messages\"][number];\n\n}> = (props)=>{\n\n    const {message} = props;\n\n    return(\n        <div className={message.direction}>\n            <em>\n                {\n                    message.direction === \n                    \"incoming\" ? `From ${message.emitter.name}` : \n                    `to ${message.receiver.name}`\n                }\n            </em>\n\n            <p>{message.description}</p>\n        </div>\n\n    )\n\n}","import React from \"react\";\n\nexport const Spinner: React.FunctionComponent = ()=> <i className=\"fa fa-spin fa-spinner\" />;","import React, {useReducer} from \"react\";\nimport {Store} from \"../../logic\";\nimport { Message } from \"./Message\";\nimport {useEvt} from \"evt/hooks\";\nimport {Spinner} from \"../Spinner\";\n\n\n\nexport const Messages:React.FunctionComponent<{\n    user: Store[\"users\"][number];\n    store: Pick<Store,\n        \"evtMessageSent\"\n    >;\n\n    isMessageLoading: boolean;\n\n\n}> = (props)=>{\n\n    const {user, store, isMessageLoading} = props;\n    const [, forceUpdate] = useReducer(x=>x+1, 0);\n\n\n    useEvt(ctx=>{\n\n        store.evtMessageSent.attach(\n            data => data.user.id === user.id || data.user.interlocutor?.id === user.id,\n            ctx,\n            ()=> forceUpdate()\n        );\n\n    },[store]);\n\n\n\n\n    return(\n        <div className=\"message-wrapper\">\n            <h2>Messages</h2>\n            <div className=\"messages\">\n                {\n                    isMessageLoading ? \n                    <div className=\"outgoing\"><p><Spinner/></p></div> :\n                    \"\"\n                }\n                {\n                    user.messages.map((message, index) => \n                        <Message key={index} message={message}/>\n                    ).reverse()\n                }\n            </div>\n\n        </div>\n\n    )\n\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {UseAsyncReturn} from \"react-async-hook\";\n\n\n\nexport const Form: React.FunctionComponent<{\n    \n    asyncSendMessage: UseAsyncReturn<void, [{\n        user: Store[\"users\"][number];\n        description: string;\n    }]>;\n    user: Store[\"users\"][number];\n\n}> = (props)=>{\n\n    const {asyncSendMessage, user} = props;\n    const [textInput, setTextInput] = useState(\"\");\n\n\n    const handleSubmit = useCallback((e: React.FormEvent<HTMLFormElement>)=>{\n\n        e.preventDefault();\n\n        if(textInput === \"\") return;\n\n        asyncSendMessage.execute(\n            {\n                user,\n                \"description\": textInput\n            }\n        );\n\n        setTextInput(\"\");\n\n\n    },[textInput, asyncSendMessage, user]);\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <textarea \n                value={textInput}\n                onChange={useCallback(({target}) => setTextInput(target.value),[])}\n            />\n\n            <input disabled={user.interlocutor === undefined} type=\"submit\" value=\"send message\"/>\n        </form>\n\n    )\n}","import React, {useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {UseAsyncReturn} from \"react-async-hook\";\n\n\n\n\nexport const Contacts: React.FunctionComponent<{\n    contacts: Store[\"users\"];\n    user: Store[\"users\"][number];\n    asyncChangeInterlocutor: UseAsyncReturn<void, [{\n        user: Store[\"users\"][number];\n        newInterlocutor: Store[\"users\"][number];\n    }]>;    \n}> = (props)=>{\n    \n    const {contacts, user, asyncChangeInterlocutor} = props;\n\n\n\n\n\n    return(\n        <ul>\n\n            {\n                contacts.map(\n                    contact => \n                    <li \n                        key={contact.id}\n                        onClick={() => asyncChangeInterlocutor.execute({user,  \"newInterlocutor\": contact})}\n                    >\n                        {contact.name}\n                    </li>\n                )\n            }\n\n        </ul>\n    )\n}","import React, {useMemo, useReducer} from \"react\";\nimport {Store} from \"../../logic\";\nimport {Messages} from \"../Messages/Messages\";\nimport {Form} from \"../Form/Form\";\nimport {useEvt} from \"evt/hooks\";\nimport {Contacts} from \"../Contacts/Contacts\";\nimport {same} from \"evt/tools/inDepth\"\nimport {useAsyncCallback} from \"react-async-hook\";\nimport {Spinner} from \"../Spinner\";\n\n\nexport const User: React.FunctionComponent<{\n    user: Store[\"users\"][number];\n    store: Store;\n    isCurrentUser: boolean;\n}> = (props)=>{\n\n    const {user, store, isCurrentUser} = props;\n    const [, forceUpdate] = useReducer(x=>x+1, 0);\n\n    const contacts = useMemo(()=>{\n        const out: Store[\"users\"] = [];\n\n        store.users.forEach(contact =>{\n            if(contact === user) return;\n\n            out.push(contact);\n\n\n        });\n\n        return out;\n\n    },[store, user]);\n\n    useEvt(ctx=>{\n        store.evtInterlocutorChanged.attach(\n            data => same(user, data.user),\n            ctx,\n            ()=> forceUpdate()\n        )\n\n    },[store])\n\n\n    const asyncChangeInterlocutor = useAsyncCallback(store.changeInterlocutor);\n \n    \n    const asyncSendMessage = useAsyncCallback(store.sendMessage);\n\n    \n\n    return(\n        <div className={`user ${isCurrentUser ? \"current\" : \"\"}`}>\n            <div className=\"contacts\">\n                {\n                    user.interlocutor === undefined ? \"\" : \n\n                    (\n                        asyncChangeInterlocutor.loading ? <h2><Spinner /></h2> : \n\n                        <h2>{user.interlocutor.name}</h2>\n                    )\n                        \n                }\n                <Contacts \n                    contacts={contacts} \n                    user={user} \n                    asyncChangeInterlocutor={asyncChangeInterlocutor}\n                />\n            </div>\n\n            <div className=\"flex-message-and-form\">\n                <Messages \n                    user={user}\n                    store={store}\n                    isMessageLoading={asyncSendMessage.loading}\n\n                />\n\n                <Form\n\n                    user={user}\n                    asyncSendMessage={asyncSendMessage}\n                />\n                </div> \n\n        </div>\n    )\n}","import React, {useState, useCallback} from \"react\";\nimport {Store} from \"../../logic\";\nimport {User} from \"../User/User\";\nimport \"./App.scss\";\n\n\n\n\n\nexport const App:React.FunctionComponent<{\n    store: Store;\n}> = (props)=>{\n\n    const {store} = props;\n    const [currentUserIndex, setCurrentUserIndex] = useState(0);\n\n    const toggleUser = useCallback(()=>{\n        if(currentUserIndex === store.users.length - 1){\n            setCurrentUserIndex(0);\n            return;\n        }\n\n        setCurrentUserIndex(currentUserIndex + 1);\n\n    }, [currentUserIndex, store.users.length]);\n\n\n    return(\n        <div className=\"App\">\n            <header>\n                <h1>{store.users[currentUserIndex].name}</h1>\n                <input type=\"button\" value=\"Toggle User\" onClick={toggleUser}/>\n            </header>\n\n\n\n\n            {\n                store.users.map((user, index) => \n                            <User \n                                store={store}\n                                user={user}\n                                key={index}\n                                isCurrentUser={\n                                    currentUserIndex === index ? true : false\n                                }\n\n                            />\n\n                    )\n\n            }\n\n\n\n\n        </div>\n    )\n}","import {Evt, NonPostableEvt, ToPostableEvt} from \"evt\";\n\n\n\n\n\ntype Message = {\n    description: string;\n    direction: \"incoming\" | \"outgoing\";\n    receiver: User;\n    emitter: User;\n\n}\n\n\n\ntype User = {\n    name: String;\n    messages: Message[];\n    interlocutor: User | undefined;\n    id: number;\n}\nexport type Store = {\n    users: User[];\n    sendMessage: (params: {user: User; description: string}) => Promise<void>;\n    changeInterlocutor: (params: {user: User; newInterlocutor: User}) => Promise<void>;\n\n    evtMessageSent: NonPostableEvt<Parameters<Store[\"sendMessage\"]>[0]>;\n    evtInterlocutorChanged: NonPostableEvt<Parameters<Store[\"changeInterlocutor\"]>[0]>;\n\n}\n\nexport async function getStore(): Promise<Store>{\n\n    const simulateNetworkDelay = (delay: number)=>{\n        return new Promise<void>(resolve => setTimeout(resolve, delay));\n    };\n\n\n    const users: User[] = (()=>{\n        const out:User[] = [];\n\n        for(let i = 0; i < 3; i++){\n            out.push({\n                \"id\": i,\n                \"messages\": [],\n                \"name\": `user ${i+1}`,\n                \"interlocutor\": undefined\n            })\n        }\n\n        return out;\n\n    })(); \n\n    const store: ToPostableEvt<Store> = {\n        \"evtMessageSent\": new Evt(),\n        \"evtInterlocutorChanged\": new Evt(),\n\n        \"sendMessage\": async params => {\n            await simulateNetworkDelay(300);\n\n            const {user, description} = params;\n            if(user.interlocutor === undefined){\n                return;\n            }\n\n            user.messages.push({\n                description, \n                \"direction\": \"outgoing\", \n                \"receiver\": user.interlocutor,\n                \"emitter\": user\n            });\n            user.interlocutor.messages.push({\n                description, \n                \"direction\": \"incoming\", \n                \"receiver\": user.interlocutor,\n                \"emitter\": user\n            });\n\n\n            store.evtMessageSent.post(params);\n\n        },\n\n        \"changeInterlocutor\": async params => {\n            const {user, newInterlocutor} = params;\n\n            await simulateNetworkDelay(300);\n\n            user.interlocutor = newInterlocutor;\n\n            store.evtInterlocutorChanged.post(params);\n\n        },\n\n        users\n    }\n\n    await simulateNetworkDelay(1500);\n\n    return store;\n\n\n\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n//import * as serviceWorker from './serviceWorker';\nimport {App} from \"./components/App/App\";\nimport {useAsync} from \"react-async-hook\";\nimport {getStore} from \"./logic\";\n\nconst Switcher: React.FunctionComponent = ()=>{\n  \n  const asyncGetStore = useAsync(getStore, []);\n  \n  \n  return(\n    asyncGetStore.result === undefined ? \n      <h1>Loading...</h1> : \n      <App store={asyncGetStore.result} \n    />\n\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Switcher />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}